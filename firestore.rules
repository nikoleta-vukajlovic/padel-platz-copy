rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isManager() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager';
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isPrivileged() {
      return isManager() || isAdmin();
    }

    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isPrivileged());
      allow create: if request.auth != null;
      allow update: if request.auth != null && (request.auth.uid == userId || isPrivileged());
      allow delete: if request.auth != null && isPrivileged();
    }

    match /courts/{courtId} {
      allow read: if true;
      allow write: if request.auth != null && isPrivileged();
    }

    match /bookings/{bookingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId || isPrivileged()
      );
    }

    match /blogs/{blogId} {
      allow read: if true;
      allow write: if true;
      allow creat: if true;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
